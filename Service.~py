import numpy as np
import math
import cv2
import json, jsonschema
import os
from dataclasses import dataclass
import colorsys
import queue
import time



class MyVideoCapture:
    def __init__(self, CamNum):
        # Open the video source
        print("Camera initialization")
        self.cap = cv2.VideoCapture(CamNum, cv2.CAP_DSHOW)
        #self.cap = cv2.VideoCapture(1, cv2.CAP_DSHOW)
        if self.cap.isOpened():
            print(f"Camera #{cfg('cam.selected')} initialization complete")
            sts.OUT_CameraReady = True    #DON'T LIKE THIS

            # завантажуємо налаштування камери з словаря settings
            self.LoadParamsFromFile('CamGeneral.json')

            # Зчитуємо фактичні ширину і висоту з камери. Зберігаємо їх в власну змінну  and save it to internal variables
            self.width = int(self.cap.get(cv2.CAP_PROP_FRAME_WIDTH))
            self.height = int(self.cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        else: #Якщо не змогли отримати зображення з камери
            self.width = 640
            self.height = 480
            sts.OUT_CameraReady = False   #DON'T LIKE THIS
            print(f"Camera #{cfg('cam.selected')} initialization FAILED!")
            # raise ValueError("Unable to open video source", 0)

        if cfg('crop.size')==0:
            cfg.conf['crop.left']=int((self.width-self.height)/2)
            cfg.conf['crop.top']=0
        cfg.conf['crop.size']=min(self.height,cfg.conf['crop.size'])


    def reset(self):
        self.cap.release()
        print("reseting")
        self.__init__()


    def LoadParamsFromFile(self, path: str):
        #відкриваємо файл з додатковими налаштуваннями для камери
        #порядково зчитуємо ключ і зосовивуємо значення в self.cap
        if os.path.exists(path):
            with open(path, 'r') as fp:
                settings = json.load(fp)
                for key in settings.keys():
                    if 'CAP_PROP_' in key.upper(): #повинно бути 1-в-1 як CV2, але можна писати маленькими
                        print(f'key={key}, value={settings.get(key)}')
                        cv2key = getattr(cv2, key.upper())
                        if key=='CAP_PROP_FOURCC':
                            self.cap.set(cv2key, cv2.VideoWriter_fourcc(*settings.get(key)))
                        else:
                            self.cap.set(cv2key, settings.get(key))
        pass


    def snapshot(self, path = None):
        ret, frame = self.get_frame()
        print(f"Camera capture to: {path}")
        filename = "Snapshots/rawframe-" + time.strftime("%d-%m-%Y-%H-%M-%S")
        if ret: #OK
            if path == None: path = filename + ".jpg"
            cv2.imwrite(path, cv2.cvtColor(frame, cv2.COLOR_RGB2BGR))

        #if frame != []:
        #    cv2.imwrite(filename + '-contours.jpg', frame)


    def ExtractModes(self):
        resolutions_full='''320×240,320×256,384×224,368×240,376×240,272×340,400×240,512×192,448×224,
        320×320,432×240,560×192,400×270,512×212,384×288,480×234,400×300,480×250,312×390,512×240,320×400,
        640×200,480×272,512×256,416×352,480×320,640×240,640×256,512×342,368×480,496×384,800×240,512×384,
        640×320,640×350,640×360,480×500,512×480,720×348,720×350,640×400,720×364,800×352,600×480,640×480,
        640×512,768×480,800×480,848×480,854×480,800×600,960×540,832×624,960×544,1024×576,960×640,1024×600,
        1024×640,960×720,1136×640,1138×640,1024×768,1024×800,1152×720,1152×768,1280×720,1120×832,1280×768,
        1152×864,1334×750,1280×800,1152×900,1024×1024,1366×768,1280×854,1280×960,1600×768,1080×1200,1440×900,
        1440×900,1280×1024,1440×960,1600×900,1400×1050,1440×1024,1440×1080,1600×1024,1680×1050,1776×1000,
        1600×1200,1600×1280,1920×1080,1440×1440,2048×1080,1920×1200,2048×1152,1792×1344,1920×1280,2280×1080,
        2340×1080,1856×1392,2400×1080,1800×1440,2880×900,2160×1200,2048×1280,1920×1400,2520×1080,2436×1125,
        2538×1080,1920×1440,2560×1080,2160×1440,2048×1536,2304×1440,2256×1504,2560×1440,2304×1728,2560×1600,
        2880×1440,2960×1440,2560×1700,2560×1800,2880×1620,2560×1920,3440×1440,2736×1824,2880×1800,2560×2048,
        2732×2048,3200×1800,2800×2100,3072×1920,3000×2000,3840×1600,3200×2048,3240×2160,5120×1440,3200×2400,
        3840×2160,4096×2160,3840×2400,4096×2304,5120×2160,4480×2520,4096×3072'''
        resolutions_medium='''160×120,176×144,192×144,240×160,320×240,352×240,352×288,384×288,480×360,
        640×360,640×480,704×480,720×480,800×480,800×600,960×720,1024×768,1280×720,1280×800,1280×960,
        1280×1024,1600×1200,1920×1080,2048×1536,2560×2048,3200×2400,4096×2160,4096×3072'''
        resolutions = '''640×480,800×600,1024×768,1280×720,1280×960,1280×1024,1600×1200,1920×1080,2048×1536,2560×1440,2560×2048'''

        extracted = {}
        for item in resolutions.split(','):
            (w,h) = item.split('×')
            self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, int(w))
            self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, int(h))
            width = self.cap.get(cv2.CAP_PROP_FRAME_WIDTH)
            height = self.cap.get(cv2.CAP_PROP_FRAME_HEIGHT)
            extracted[str(int(width))+"x"+str(int(height))] = True
        print(extracted)
        return extracted


    def crop_frame(self, frame):
        #return frame[0:h,w:w+h] #croping
        return cfg('crop.size'), frame[cfg('crop.top'):cfg('crop.size'),cfg('crop.left'):cfg('crop.left')+cfg('crop.size')] #croping
        pass

    def gain_up(self):
        step = 20
        gain = self.cap.get(cv2.CAP_PROP_GAIN)
        self.cap.set(cv2.CAP_PROP_GAIN, min(gain + step,100))


    def gain_down(self):
        step = 20
        gain = self.cap.get(cv2.CAP_PROP_GAIN)
        self.cap.set(cv2.CAP_PROP_GAIN, max(gain - 20, 0))

    def gain_zero(self):
        self.cap.set(cv2.CAP_PROP_GAIN, 0)


    def get_frame(self):
        if self.cap.isOpened():
            ret, frame = self.cap.read()
            if ret:
                frame = frame[cfg('crop.top'):cfg('crop.size'),cfg('crop.left'):cfg('crop.left')+cfg('crop.size')] #croping
                if cfg('cam.rotation')==90:
                    cv2.rotate(frame, cv2.ROTATE_90_CLOCKWISE, frame)
                elif cfg('cam.rotation')==180:
                    cv2.rotate(frame, cv2.ROTATE_180, frame)
                elif cfg('cam.rotation')==270:
                    cv2.rotate(frame, cv2.ROTATE_90_COUNTERCLOCKWISE, frame)

                # Return a boolean success flag and the current frame converted to RGB
                return (ret, cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
            else:
                return (False, None)
        else:
            return (False, None)


    def CamReady(self):
        if self.cap.isOpened():
            ret, frame = self.cap.read()
            return ret
        return False

    def run_settings(self):
        self.cap.set(cv2.CAP_PROP_SETTINGS, 1) #запуск системних налаштувань

    def get_parameters(self):
        result={}
        result['cam.brightness'] = int(self.cap.get(cv2.CAP_PROP_BRIGHTNESS))
        result['cam.contrast'] = int(self.cap.get(cv2.CAP_PROP_CONTRAST))
        result['cam.gain'] = int(self.cap.get(cv2.CAP_PROP_GAIN))
        return result
        #self.cap.set(cv2.CAP_PROP_BRIGHTNESS, cfg('cam.brightness'))
        #self.cap.set(cv2.CAP_PROP_CONTRAST, cfg('cam.contrast'))
        #self.cap.set(cv2.CAP_PROP_GAIN, cfg('cam.gain'))

    # Release the video source when the object is destroyed
    def __del__(self):
        self.cap.release()
        #if self.vid.isOpened():
        #    self.vid.release()




class Config:
    configSchema = {
        "type": "object",
        "properties":
            {
            "gui.lang": {"type": "string", "enum":["en","uk","ru"]},
            "cam.fps": {"type": "number", "enum":[5,10,15,30]},
            "cam.selected": {"type": "number","minimum":0,"maximum":2},
            "cam.rotation": {"type": "number","enum":[0, 90, 180, 270]},
            #"cam.fourcc": {"type": "string", "enum":["MJPG","YUYV","H264"]},
            #"cam.resolution": {"type": "string", "enum":["640x480", "800x600", "1280x720", "1280x960","1920x1080"]},
            #"cam.brightness": {"type": "number","minimum":-64,"maximum":64},
            #"cam.contrast": {"type": "number","minimum":0,"maximum":95},
            #"cam.gain": {"type": "number","minimum":0,"maximum":100},
            "crop.left":{"type": "number"}, "crop.top":{"type": "number"}, "crop.size":{"type": "number"},
            "nozzle.x0":{"type": "number"}, "nozzle.y0":{"type": "number"},
            "nozzle.zonesize" : {"type": "number","minimum":2,"maximum":64},
            "scale.coeff":{"type": "number"},
            "server.autoshots":{"type": "boolean"}
            },
        "required":["gui.lang"]
    }
    def __init__(self):
        #ініціалізацію параметрів по замовчанню
        self.conf_default = {'gui.lang': 'en', 'cam.count' : 0, 'cam.selected' : 0, 'cam.rotation': 90,
            # 'cam.fourcc' : 'MJPG', 'cam.fps' : 10, 'cam.resolution' : '1280x960',
            # 'cam.brightness' : 20, 'cam.contrast' : 60, 'cam.gain' : 0,
            'nozzle.zonesize' : 32,
            'nozzle.x0' : 0, 'nozzle.y0' : 0, 'scalecoeff' : -1}
        self.conf=self.read_cfg() #conf_default

    def __call__(self, key): #ппрямий виклик
        return self.conf.get(key, 0)

    def update(self, tmp):
        #In Python 3.9.0 or greater (PEP-584):          z = x | y
        #In Python 3.5 or greater:                      z = {**x, **y}
        self.conf = {**self.conf, **tmp}

    def read_cfg(self):
        if os.path.exists('config.json'):
            with open('config.json', 'r') as fp:
                return json.load(fp)
        else:
            return self.conf_default
    def save_cfg(self):
        with open('config.json', 'w') as fp:
            json.dump(self.conf, fp, sort_keys = True)
    def save_txt(self, text):
        with open('config.json', 'w') as fp:
            fp.write(text)
        pass

    def validate(self, text):
        # If no exception is raised by validate(), the instance is valid.
        try:
            self.conf=json.loads(text)
            z=jsonschema.validate(instance=self.conf, schema=self.configSchema)
        except jsonschema.exceptions.ValidationError as err:
            #tkinter.messagebox.showerror("Error", "JSON is wrong. " + err.message)
            return False, err.message #Not Valid
        else:
            self.save_cfg()
            print('all ok')
            return True, None

    @property
    def dumps(self):
        return json.dumps(self.conf)



class ResultsQueue:
    def __init__(self, size):
        self.zero = [0, 0, 0, 0, 0] #пусті 5ть значень - 2 округлості, різниця між центрами, 2 радіуси
        self.size = size
        self.reset()
        self.max = self.zero.copy() #найкращі значеня
        self.lastavg = self.zero.copy()

    def reset(self):
        self.__count = 0
        self.queue = [self.zero]*self.size

    def enqueue(self, x):
        self.queue.insert(0, x)
        self.queue.pop(-1)      #removing old (last element)
        self.__count = min(self.__count+1, self.size) #quantity of measuring

    def average(self):
        avg = self.zero.copy() #пустий набір даних (5 значень з нулями)
        #elesize = len(tmp)
        elesize = len(self.zero)
        for tmp in self.queue: #для кожного запису в черзі значень
            print(tmp)
            for i in range(elesize): #кожен елемент
                avg[i] += tmp[i] / self.size
        for i in range(elesize):
            avg[i] = round(avg[i], 3)
        return avg

    def jsonresult(self):
        if self.isFull():
            self.lastavg = self.average()
            self.reset()
        #return json.dumps(self.lastavg) #Поки-що JSON нам не потрібен
        return self.lastavg

    def isEmpty(self):      return self.__count == 0
    def isFull(self):       return self.__count == self.size
    def front(self):        return self.queue[-1]
    def rear(self):         return self.queue[0]
    def len(self):          return self.__count


#@dataclass
class CommandStatus:
    def __init__(self):
        self.Idle = 0          # Нема запиту
        self.Start = 1         # Перед початком роботи, необхідна для підготовчих робіт
        self.Work = 2          # Статус
        self.Abort = 500       # Закінчили неуспішно
        self.Ready = 200       # Закінчили успішно
        self.state = self.Idle #Запиту немає, скидати після отримання результатів
        #self.timetostop = 1

        #self.Requests={}
        self.RequestNone = -1   #дуже не подобається
        self.RequestBeamAUTO = 0
        self.RequestBeamMANUAL = 1
        self.RequestNozzle = 2
        self.Request = self.RequestNone

        #self.TimeStart = time.time()     # Треба якесь початкове значення
        self.TimeStart = 0


    @property
    def Name(self):
        if self.Request==self.RequestNone:
            return None
        elif self.Request==self.RequestBeamAUTO:
            return 'BeamAnalyzeAUTO'
        elif self.Request==self.RequestBeamMANUAL:
            return 'BeamAnalyzeMANUAL'
        elif self.Request==self.RequestNozzle:
            return 'NozzleAnalyze'
        else:
            return 'Don''t know what request'


    #@property
    def isBeamRequest(self):
        return self.Request in (self.RequestBeamAUTO, self.RequestBeamMANUAL)
    #@property
    def isNozzleRequest(self):
        return self.Request==self.RequestNozzle

    #def __call__(self):
    #    return self.state

    @property
    def statejson(self):
        return {"job_state" : self.state}


    def isIdle(self):
        return self.state == self.Idle
    def isStart(self):
        return self.state == self.Start
    def isWork(self):
        return self.state == self.Work
    def isReady(self):
        return self.state == self.Ready
    def isAbort(self):
        return self.state == self.Abort

    #Питання де робити скидання  - в setIdle чи в setStart
    def setIdle(self):
        self.state = self.Idle
        self.Request = self.RequestNone
    def setStart(self, id, seconds:int = 120):
        self.TimerStart(seconds)
        self.state = self.Start
        if id in (self.RequestBeamAUTO, self.RequestBeamMANUAL, self.RequestNozzle):
            self.Request = id
            if id == self.RequestNozzle: # А треба перевірка чи не треба щор треба робити щоб купити мозок
                sts.OUT_NozzleExists = False
                sts.results.reset()                     #!!!скидаємо значення якось не дуже гарно
        else:
            self.Request = self.RequestNone

    def setWork(self):
        self.state = self.Work
    def setReady(self):
        if cfg.conf['server.autoshots']: queue1.put('CameraCapture')
        self.state = self.Ready
    def setAbort(self):
        if cfg.conf['server.autoshots']: queue1.put('CameraCapture')
        self.state = self.Abort

    def TimerFinish(self):
        if time.time()-self.TimeStart>self.timetostop:
            if job.isWork():
                print("TimeOut happened!!!")
                job.setAbort()
        pass
    def TimerStart(self, seconds):
        self.timetostop=seconds
        self.TimeStart = time.time()



@dataclass
class Status:
    GuiNoWait:  bool = False                # Прапорець, що ми не будемо очікувтаи натисання кнопки Confirm/Abort
    IN_CameraShow:  bool = False               #показувати чи не показувати потік з камери, прапорець

    IN_BeamAuto: bool = False               #шукаємо не шукаємо АВТОматично промінь, прапорець
    #IN_BeamSearching: bool = False          #шукаємо не шукаємо промінь, прапорець
    IN_BeamCalibrating: bool = False        #запуск відбору кольору після натискання кнопки, прапорець
    IN_BeamShowGrid:  bool = False

    IN_NozzleCentering: bool = False        #дозвіл виставляти вручну X0,Y0 через натискаяння клавіш курсору, прапорець
    IN_NetModyfing:     bool = False        #редагуємо сітку, прапорець

    #IN_CameraCaptureFilePath: str = None    #шлях з назвою файла скріншота, значення яке передається запитом куди будемо зберігати фото
    OUT_CameraReady: bool = True

    OUT_BeamShowResult: bool = None
    OUT_BeamDX: int = 0
    OUT_BeamDY: int = 0
    OUT_BeamCentered: bool = False


    #OUT_Beam: list = [0,0]
    #OUT_Beam: tuple(str) = ('0','0')
    #OUT_Beam : list[int] = [0, 0] #will woork in python>=3.9

    OUT_NozzleOuterCircularity: int = 0
    OUT_NozzleInnerCircularity: int = 0
    OUT_NozzleOuterDiameterPX: float = 0
    OUT_NozzleInnerDiameterPX: float = 0
    OUT_NozzleInnerDiameterMM: float = 0
    OUT_NozzleDelta: int = 0
    OUT_NozzleExists: bool = False
    OUT_NozzleInnerStatus: str = '' # по замовчанню - негідне
    OUT_NozzleOuterStatus: str = '' #  по замовчанню - негідне

    beamR: int = 255
    beamG: int = 255
    beamB: int = 255

    results = ResultsQueue(8)  # Черга для збору даних по оцінці сопла
    res_contours = []

    @property
    def JSON(self):
        return str(self.__dict__)   # Збирає все в dictionary у вигляді рядка

    def reset(self):
        self.__init__()




def circularity(contour):
    area = cv2.contourArea(contour)
    length = cv2.arcLength(contour, True)
    if length!=0:   return round(4 * np.pi * area / (length ** 2),3)
    else:           return 0


def ExtractPixelHSV(frame,x,y):
    imghsv = cv2.cvtColor(frame, cv2.COLOR_RGB2HSV)

    # Нам треба зробити виборку пікселей -4, +4
    crop=imghsv[y-2:y+2,x-2:x+2]  #croping y axis, x axis
    res=np.mean(crop, axis=(0,1)).astype(int)   #with numpy
    #res=crop.mean(axis=(0,1))                 #without numpy

    #print(f'RGB: {frame[y,x]}')
    cfg.conf['BeamHue'] = sts.beamH = int(res[0]) #HUE is first value
    #(sts.beamR,sts.beamG,sts.beamB) = hsv2rgb(sts.beamH, 255, 255)

    color = frame[y,x] #RGB
    (sts.beamR, sts.beamG, sts.beamB) = hsv2rgb(sts.beamH, 255, 255, 0)
    #(sts.beamR, sts.beamG, sts.beamB) = (int(color[0]),int(color[1]),int(color[2]))
    #return imghsv[y,x]
    return res

def hsv2rgb(h,s,v, hdelta):
    h = (h + hdelta) % 180
    h = h/180
    s = s/255
    v = v/255
    return tuple(round(i * 255) for i in colorsys.hsv_to_rgb(h,s,v))


def FindLaserBeam(frame, hue, delta):
    im = frame
    imghsv  = cv2.cvtColor(frame, cv2.COLOR_RGB2HSV)

    #For HSV, hue range is [0,179], saturation range is [0,255], and value range is [0,255]
    #For conversion from
    #hue, sat, val = cv2.split(imghsv) #h=248 paint.net 350
    lower = np.array([hue-delta,96,96])
    upper = np.array([hue+delta,255,255])
    mask = cv2.inRange(imghsv, lower, upper)

    contours, hierarchy = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    if len(contours)>0:
        cnt = sorted(contours, key=cv2.contourArea, reverse=True)[0]
        if cv2.contourArea(cnt)>32:
            #cv2.drawContours(frame, contours, i, (255,0,0), 1)

            #((centx,centy), (width,height), angle) = cv2.fitEllipse(contours[0])
            #cv2.ellipse(im, (int(centx),int(centy)), (int(width/2),int(height/2)), angle, 0, 360, (0,0,255), 1)

            (x, y), radius = cv2.minEnclosingCircle(cnt)
            center = (int(x),int(y))
            radius = int(radius)
            (dx ,dy) = (int(x-cfg('nozzle.x0')),int(y-cfg('nozzle.y0')))

            (sts.OUT_BeamDX, sts.OUT_BeamDY) = (dx, dy)
            sts.OUT_NozzleDelta = int(math.sqrt(dx**2+dy**2))
            #(sts.OUT_BeamX, sts.OUT_BeamY)=center
            #sts.OUT_Beam = center


            #cv2.circle(im, center, radius, (hsv2rgb(cfg('BeamHue'), 255, 255, 30)), 2)
            if sts.OUT_NozzleDelta < cfg("nozzle.zonesize"):
                color = (0, 255, 0)
                width = 4
                sts.OUT_BeamCentered = True
            else:
                color = (255, 0, 0)
                width = 2
                sts.OUT_BeamCentered = False

            #if job.Request==job.RequestAUTO:
            if sts.GuiNoWait:     #!!! Треба десь зберігати параметри саме запита!
                job.setReady()           # Ми повнні одразу виставляти готовність, якщо в режимі без GUI


            cv2.circle(im, (cfg('nozzle.x0'),cfg('nozzle.y0')), 2, (0, 0, 0), 2)
            cv2.circle(im, (center[0],center[1]), radius, color, width)
            #cv2.line(im, (center[0]-radius,center[1]), (center[0]+radius,center[1]), hsv2rgb(cfg('BeamHue'), 255, 255, 30), 4)
            #cv2.line(im, (center[0],center[1]-radius), (center[0],center[1]+radius), hsv2rgb(cfg('BeamHue'), 255, 255, 30), 4)
            #cv2.putText(im, f"({dx},{dy})", (cfg('nozzle.x0')+8, cfg('nozzle.y0') + 8), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 0), 2, cv2.LINE_AA)

        else:
            (sts.OUT_BeamDX, sts.OUT_BeamDY) = (0, 0)
            #(sts.OUT_BeamX, sts.OUT_BeamY) = (-1,-1)
            #sts.OUT_Beam = [-1,-1]
    else:
        (sts.OUT_BeamDX, sts.OUT_BeamDY) = (0, 0)
        #(sts.OUT_BeamX, sts.OUT_BeamY) = (-1,-1)
        #sts.OUT_Beam = [-1,-1]
    return im



def ExtractContours(frame):
    #global smoothened #нам потрібні контури навіть після заповнення черги
    color=((0, 0, 255), (0, 255, 0))
    im1 = frame

    if sts.results.isFull() and job.isWork(): #Черга заповнена, робимо підрахунки результата
        res = sts.results.jsonresult()
        print(f'result = {res}')
        sts.OUT_NozzleOuterCircularity = sts.results.lastavg[0]
        sts.OUT_NozzleInnerCircularity = sts.results.lastavg[1]
        sts.OUT_NozzleDelta            = sts.results.lastavg[2]
        sts.OUT_NozzleOuterDiameter    = sts.results.lastavg[3]*2
        sts.OUT_NozzleInnerDiameter    = sts.results.lastavg[4]*2

        if sts.OUT_NozzleInnerCircularity <0.1 and  sts.OUT_NozzleOuterCircularity<0.1:
            sts.OUT_NozzleExists = False
        else:
            sts.OUT_NozzleExists = True

        job.setReady()

    if job.isReady():
        cv2.drawContours(im1, sts.res_contours, 0, color[0], 2)
        cv2.drawContours(im1, sts.res_contours, 1, color[1], 2)
        for i in (0,1):
            cv2.putText(im1,f'{i}: {"%.2f" % sts.results.lastavg[i]} D={"%.1f" % (sts.results.lastavg[i+3]/39.6)}  STATUS: {CheckValues()[1][i]}',(10,850 + i*30), font, 0.8, color[i], 2, cv2.LINE_AA)
        cv2.putText(im1,f'Delta = {"%.0f" % sts.results.lastavg[2]} D={"%.1f" % sts.results.lastavg[2]} STATUS: {bool(sts.results.lastavg[2]<10)}',(10,820), font, 0.8, (255, 255, 255), 2, cv2.LINE_AA)
        return im1


    hsv  = cv2.cvtColor(im1, cv2.COLOR_BGR2HSV_FULL) #перетворюємо в модель HSV (тон насиченість яскравість)
    h, s, v = cv2.split(hsv)                        #розділяємо на три матриці
    imgray2 = v

    # ЗАДАЄМО ПАРАМЕТРИ ПОШУКУ
    ret, thresh = cv2.threshold(imgray2, 150, 200, cv2.THRESH_BINARY)
    #ret, thresh = cv2.threshold(imgray2, 150, 200, cv2.THRESH_BINARY_INV)
    #ret, thresh = cv2.adaptiveThreshold(imgray2, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,11,2)

    #imgray2 = cv2.equalizeHist(thresh)

    # ЗНАХОДИМО КОНТУРИ
    #cv2.RETR_TREE - дерево усіх, RETR_EXTERNAL - тільки зовнішні
    #contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
    contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_TC89_L1)

    # ВІДМАЛЬОВКА ВСІХ ЗНАЙДЕНИХ СИРИХ КОНТУРІВ
    #im1=cv2.cvtColor(imgray1, cv2.COLOR_GRAY2RGB)
    #cv2.drawContours(im1, contours, -1, (0,255,0), 1)


    # ВИБОРКА КОНТУРІВ З ПЛОЩЕЮ БІЛЬШЕ НІЖ ЗНАЧЕННЯ В НОВИЙ СПИСОК
    # І ОТРИМАННЯ ІНДЕКСУ НАЙБІЛЬШОГО, ЩОБ ПОТІМ ВИТЯГТИ ВСІ ДОЧІРНІ
    MaxIndex=-1
    MaxArea=0
    contours_new=[]
    for i,contour in enumerate(contours):
        area = cv2.contourArea(contour)
        #length = cv2.arcLength(contour, True)
        if area>8*8:
            contours_new.append(contour)
            if area>MaxArea:
                #MaxIndex=i
                MaxIndex+=1
                MaxArea=area

    if MaxIndex==-1: #немає жодного контору
        CycleNozzleAnalyzer(sts.results.zero) #пусте значення
        return frame #вивалюємся

    ##MaxContour=contours_new[MaxIndex]
    ##    вимкнуто, бо з ієархіями у нас проблеми
    ##    sub_contours=[MaxContour] #Загоняємо найбільший контур першим
    ##    Next=hierarchy[0][MaxIndex][2] # getting first child
    ##    while Next!=-1:
    ##        sub_contours.append(contours[Next])
    ##        Next = hierarchy[0][Next][0]

    (max_x, max_y),max_radius = cv2.minEnclosingCircle(contours_new[MaxIndex]) #!!! не знаю що це робить

    # ЗГЛАДЖУВАННЯ КОНТУРІВ
    smoothened = []
    #for cnt in sub_contours:
    for cnt in contours_new:
        # define main island contour approx. and hull
        perimeter = cv2.arcLength(cnt,True)
        epsilon = 0.002*cv2.arcLength(cnt,True)
        smoothened.append(cv2.approxPolyDP(cnt,epsilon,True))

    # СОРТУЄМО ОТРИМАНІ КОНТУРИ ПО ЗМЕНШЕННЮ ПЛОЩІ
    smoothened.sort(key=cv2.contourArea, reverse=True)

    cxy={}
    results=[0, 0, 0, 0, 0]
    if len(smoothened)>0:
        for i, cnt in enumerate(smoothened):
            if i in (0,1): # ВІДМАЛЬОВУЄМО ДВА НАЙБІЛЬШІ КОНТУРИ ОСОБЛИВИМИ КОЛЬОРАМИ
                #clr = color[i]
                results[i] = circularity(smoothened[i])
                (x,y),radius = cv2.minEnclosingCircle(smoothened[i])
                cxy[i]=(int(x),int(y))
                center = (int(x),int(y))
                radius = int(radius)
                results[i+3]=radius #i = 3,4 - радіус для зовнішнього і внутрішнього контурів
                #cv2.circle(im1,center,radius, clr, 1)

    if len(smoothened)>=2:
        d=math.dist(cxy[0],cxy[1])
        results[2]=d
        sts.res_contours=[smoothened[0],smoothened[1]]

    # Запис результатів в чергу для отримання середнього значення
    CycleNozzleAnalyzer(results)
    return frame


def ExtractScale():
    # На вході беремо або готовий останній фрейм??, або зчитуємо примусово і робимо йому обрізку окремою функцією
    # Запускаємо ф-цію, яка витягує 2 найбільші контури (нова, бо треба розділити формування контурів і формування картинки)
    pass



def CycleNozzleAnalyzer(results):
    sts.results.enqueue(results)

    # Заміряєм параметри в абсолютних значення, якщо хоч 1 з 3х  не відповідає True, то фіксуємо їх.
    # Витягуємо середні значення
    tmp = sts.results.average()
    if tmp[0]>sts.results.max[0]: sts.results.max[0]=tmp[0]
    if tmp[1]>sts.results.max[1]: sts.results.max[1]=tmp[1]
    if tmp[2]<sts.results.max[2]: sts.results.max[2]=tmp[2]

    if CheckValues()[0]==False:
        # prepair next iteration
        pass




# Перевірка набору значень відносно критерія. Беремо масив трьох значень, повертаємо масив трьох логічних значень
# Можливо треба засунути всередину класа
def CheckValues():
    result=[False]*3
    tmp = sts.results.lastavg
    if tmp[0]>0.8  : result[0] = True
    if tmp[1]>0.85 : result[1] = True
    if tmp[2]<10   : result[2] = True
    return math.prod(result), result


# Перетворення словаря в клас
class Dict2Class(object):
    def __init__(self, my_dict):
        for key in my_dict:
            setattr(self, key, my_dict[key])




def showparams(frame):
    cv2.putText(frame, sts.JSON, (600, 600), font, 0.8, (255, 255, 255), 2, cv2.LINE_AA)
    return frame


def main():
    pass


font = cv2.FONT_HERSHEY_SIMPLEX
queue1 = queue.Queue()
cfg = Config() #створюємо налаштування
sts = Status() #створюємо поточні дані
job = CommandStatus() #статус останньої операції

# open video source (trying to open the computer webcam)
# створюємо і запускаємо відео (клас роботи з вебкамерою)
vid = MyVideoCapture(cfg('cam.selected'))



if __name__ == '__main__':
    main()




